// src/helpers/api-communicator.ts

import axios from "axios";

/**
 * Create a preconfigured Axios instance
 */
const API = axios.create({
  baseURL: import.meta.env.VITE_API_URL || "http://localhost:5000/api/v1",
  withCredentials: true,
});

// =========================
// Authentication
// =========================

export const loginUser = async (email: string, password: string) => {
  const res = await API.post("/user/login", { email, password });
  if (res.status !== 200) throw new Error("Unable to login");
  return res.data;
};

export const signupUser = async (name: string, email: string, password: string) => {
  const res = await API.post("/user/signup", { name, email, password });
  if (res.status !== 201) throw new Error("Unable to signup");
  return res.data;
};

export const checkAuthStatus = async () => {
  const res = await API.get("/user/auth-status");
  if (res.status !== 200) throw new Error("Unable to authenticate");
  return res.data;
};

export const logoutUser = async () => {
  const res = await API.get("/user/logout");
  if (res.status !== 200) throw new Error("Unable to logout");
  return res.data;
};

// =========================
// Chat
// =========================

export const sendChatRequest = async (message: string) => {
  const res = await API.post("/chat", { message });
  if (res.status !== 200 && res.status !== 201) {
    throw new Error("Unable to send chat");
  }
  return res.data; // { chats: [...] }
};

export const getUserChats = async () => {
  const res = await API.get("/chat");
  if (res.status !== 200) {
    throw new Error("Unable to fetch chats");
  }
  return res.data; // { message: "OK", chats: [...] }
};

export const deleteUserChats = async () => {
  const res = await API.delete("/chat");
  if (res.status !== 200) {
    throw new Error("Unable to delete chats");
  }
  return res.data; // { message: "OK" }
};
